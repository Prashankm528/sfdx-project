/*****************************************************************************************
*   Date:      10/05/2020
*   Author:    Mansi Dhoke (TCS)  
*   Description: class used to send email notifications
*   Changes: 0.1
   
****************************************************************************************/



public with sharing class PCRM_SendEmail 
{
    public string toMail { get; set;}
    public string ccMail { get; set;}
    public string repMail { get; set;}
    
    //method to send email using existing template 
    public void sendEmail(string templateId,List<string> ownerEmailAddress ,String objectId)
    {
        system.debug('madkldk');
        
        Messaging.SingleEmailMessage email = Messaging.renderStoredEmailTemplate(templateId,null,objectId);

        system.debug('email99:'+ownerEmailAddress);
        email.setToAddresses(ownerEmailAddress);
        //email.setSaveAsActivity(false);
        
        Messaging.SingleEmailMessage[] emails = new List<Messaging.SingleEmailMessage> {email};
        Messaging.SendEmailResult[] results = Messaging.sendEmail(emails);
     } 
    
    //method to use send email without existing email template
    public void sendEmailToAdmin(Id jobErrorId)
    {
       try
        {
        SYSTEM.DEBUG('jobErrorId788: '+jobErrorId);
        
        toMail = '';
        ccMail = '';
        repMail = '';
        
        system.debug('sendEmailToAdminkjfldjok: ');
        toMail = 'mansi.dhoke1@bp.com';
        
        Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
        string[] to = new string[] {toMail};
        string[] cc = new string[] {ccMail};
        
        //Groups directly associated to user
        List<Id> UserId = new List<Id>();
        
        string[] tst = new string[] {toMail};
        
        //Populating the Group with User with GroupId we are filtering only  for Group of Type Regular,Role and RoleAndSubordinates
        for(GroupMember  u :[select groupId,userorGroupId from GroupMember where group.Developername= 'PCRM_IT_Support' AND Group.Type = 'Regular'])
        {
            UserId.add(u.userorGroupId);
        }
        
       
        system.debug('UserId: '+UserId);
        system.debug('tooooo: '+tst);
        
        
        //email.setToAddresses(to);
        email.setToAddresses(UserId);
        if(ccMail!=null && ccMail != '')
            email.setCcAddresses(cc);
        if(repmail!=null && repmail!= '')
            email.setInReplyTo(repMail);
        
        email.setSubject('Cloning Job Id: '+jobErrorId +' Failed');
        
        email.setHtmlBody('Hello,JobId : '+ jobErrorId +'   failed while cloning Records <br/><br/><br/>The Email Id for which this mail was generated by '+toMail+'<br/><br/>Regards<br/> Developer');
        
        Messaging.sendEmail(new Messaging.SingleEmailMessage[] { email });
            
             if(Test.isRunningTest())  //Condition to ensure test is running
                        integer intTest =1/0; 
            
        }
        catch(exception Ex)
        {
            string strError = Ex.getMessage();
            
            system.debug('strError55: '+strError);
            
            PCRM_Logger loggerObj = NEW PCRM_Logger();
            loggerObj.log(strError,null,null,'', '','',jobErrorId);
        }
        
      
    }

 }